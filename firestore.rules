rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isContentOwner() {
      return isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.createdBy == request.auth.uid ||
        (resource.data.participants != null && resource.data.participants.hasAny([request.auth.uid]))
      );
    }

    function isValidUserData(userData) {
      return userData.size() > 0 
        && userData.uid is string
        && userData.email is string
        && userData.displayName is string
        && userData.userType in ['athlete', 'coach', 'team', 'sponsor', 'media', 'fan']
        && userData.createdAt is string
        && userData.updatedAt is string;
    }

    function isValidProfileUpdate(userData) {
      let allowedFields = [
        'displayName', 'photoURL', 'bio', 'location', 'socialLinks',
        'updatedAt', 'verified', 'athleteInfo', 'coachInfo', 'teamInfo',
        'sponsorInfo', 'mediaInfo'
      ];
      return userData.diff().affectedKeys().hasOnly(allowedFields);
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isVerified() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verified == true;
    }

    function isValidVerificationDoc() {
      let incoming = request.resource.data;
      return incoming.size() <= 1000000  // Max 1MB
        && incoming.type in ['studentId', 'athleteId', 'transcript', 'other']
        && incoming.fileUrl is string
        && incoming.fileName is string
        && incoming.mimeType in ['image/jpeg', 'image/png', 'application/pdf']
        && incoming.uploadedAt is string;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.auth.uid == userId 
        && isValidUserData(request.resource.data);
      allow update: if (isOwner(userId) && isValidProfileUpdate(request.resource.data)) 
        || isAdmin();
      allow delete: if isAdmin();
      
      // User connections subcollection
      match /connections/{connectionId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId) || isAdmin();
      }
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        // Allow deletion if the user is being deleted
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) == false
      );
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) == false
      );
    }

    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || 
        isAdmin() ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) == false
      );
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid || 
        isAdmin() ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) == false
      );
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Analytics collection
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Verification requests
    match /verifications/{requestId} {
      allow read: if isSignedIn() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow create: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Verification documents
    match /verification_documents/{docId} {
      allow read: if isSignedIn() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow create: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid &&
        isValidVerificationDoc()
      );
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
} 